#!/usr/bin/env node
require('dotenv').config()

// module dependencies
var app = require('../app');
var http = require('http');
const dbo = require('../lib/db');
var debug = require('../lib/debug')();

// get port from environment and store in Express.
var port = normalizePort(process.env.SERVER_PORT || '5000');
app.set('port', port);

// get app version from environment
var appVersion = process.env.APP_VERSION

// create HTTP server.
var server = http.createServer(app);

// connect to server
dbo.connectToServer((err) => {
  if (err) {
    debug(err)
    process.exit()
  }

  // listen on provided port, on all network interfaces.
  server.listen(port);
})


// attach listeners
server.on('error', onError);
server.on('listening', onListening);


// normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('listening on ' + bind);
  debug('app code revision', ...(appVersion.split('.').map(Number)));
}
